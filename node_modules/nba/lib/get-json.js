"use strict";

var url = require("url");
var qs = require("querystring");
var template = require("nba-client-template");

var HEADERS = {
  "Accept-Encoding": "gzip, deflate",
  "Accept-Language": "en-US",
  Accept: "*/*",
  "User-Agent": template.user_agent,
  Referer: template.referrer,
  Connection: "keep-alive",
  "Cache-Control": "no-cache"
};

function createUrlString(_url, query) {
  var urlObj = url.parse(_url);
  urlObj.query = query;
  return urlObj.format();
}

function createGetJson() {
  var fetch = require("node-fetch");

  return function getJson(_url, query) {
    var _options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var urlStr = createUrlString(_url, query);

    var options = Object.assign({}, _options);
    options.headers = Object.assign(options.headers || {}, HEADERS);

    return fetch(urlStr, options).then(function (resp) {
      if (resp.ok) return resp.json();

      return resp.text().then(function (text) {
        throw new Error(resp.status + " " + resp.statusText + " â€“ " + text);
      });
    });
  };
}

function createGetJsonp() {
  var jsonp = require("jsonp");

  return function getJsonp(_url, query) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return new Promise(function (resolve, reject) {
      var urlStr = createUrlString(_url, query);

      jsonp(urlStr, { timeout: options.timeout }, function (err, data) {
        // for compatibility with timeouts from request module
        if (err && err.message === "Timeout") err.code = "ETIMEDOUT";
        if (err) return reject(err);
        return resolve(data);
      });
    });
  };
}

module.exports = typeof window === "undefined" ? createGetJson() : createGetJsonp();