"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var mergeCollections = require("./util/merge-collections");
var blank = require("./util/blank");
var stats = require("./stats");

var pick = require("lodash.pick");

var TWO_WORD_TEAMS = blank({
  "Portland Trail Blazers": true
});

// adds location city and short name (i.e. 'Warriors') data to team objects.
function addExtraTeamData(team) {
  team.teamName = team.teamName.trim();
  var splitted = team.teamName.split(" ");
  if (TWO_WORD_TEAMS[team.teamName]) {
    team.simpleName = splitted.splice(-2, 2).join(" ");
  } else {
    team.simpleName = splitted.splice(-1, 1).join();
  }
  team.location = splitted.join(" ");
  return team;
}

function teamInfo() {
  return Promise.all([stats.teamStats(), stats.teamYears()]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var teamStats = _ref2[0];
    var teamYears = _ref2[1];

    return mergeCollections("teamId", teamStats, teamYears).map(function (d) {
      return addExtraTeamData(pick(d, "teamId", "abbreviation", "teamName"));
    });
  });
}

module.exports = teamInfo;